% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db.R
\name{emr_db.init}
\alias{emr_db.init}
\alias{emr_db.init_examples}
\title{Initializes connection with Naryn Database}
\usage{
emr_db.init(
  global.dir = NULL,
  user.dir = NULL,
  global.load.on.demand = TRUE,
  user.load.on.demand = TRUE,
  do.reload = F
)
}
\arguments{
\item{global.dir}{root directory of global tracks}

\item{user.dir}{'NULL' or root directory of user tracks}

\item{global.load.on.demand}{see below}

\item{user.load.on.demand}{see below}

\item{do.reload}{If 'TRUES', rebuilds DB index files}
}
\value{
None.
}
\description{
Initializes connection with Naryn Database.
}
\details{
'emr_db.init' initializes the connection with Naryn Database facilitating
tracks access. 'global.dir' marks the root directory of the global tracks.
'user.dir' parameter specifies the directory of the user tracks. Unlike
global tracks user tracks may be deleted ('emr_track.rm') or new ones can be
created ('emr_track.create'). 'user.dir' can be 'NULL', in which case
operations on user tracks will be disabled.

When the package is attached it internally calls 'emr_db.init_examples'
which sets 'global.dir' to 'PKGDIR/naryndb/test' and 'user.dir' to NULL
('PKGDIR' is the directory where the package is installed).

Physical files in the database are supposed to be managed exclusively by
Naryn itself. Manual modification, addition or deletion of track files may
be done, yet it must be ratified via running 'emr_db.reload'. Some of these
manual changes however (like moving a track from global space to user or
vice versa) might cause 'emr_db.init' to fail. 'emr_db.reload' cannot be
invoked then as it requires first the connection to the DB be established.
To break the deadlock use 'do.reload=True' parameter within 'emr_db.init'.
This will connect to the DB and rebuild the DB index files in one step.

If 'load.on.demand' is 'TRUE' a track is loaded into memory only when it is
accessed and it is unloaded from memory as R sessions ends or the package is
unloaded.

If 'load.on.demand' parameter is 'FALSE', all the tracks from the specified
space (global / user) are pre-loaded into memory making subsequent track
access significantly faster. As loaded tracks reside in shared memory, other
R sessions running on the same machine, may also enjoy significant run-time
boost. On the flip side, pre-loading all the tracks prolongs the execution
of 'emr_db.init' and requires enough memory to accommodate all the data.

Choosing between the two modes depends on the specific needs. While
'load.on.demand=TRUE' seems to be a solid default choice, in an enviroment
where there are frequent short-living R sessions, each accessing a track one
might opt for running a "daemon" - an additional permanent R session. The
daemon would pre-load all the tracks in advance and stay alive thus boosting
the run-time of the later emerging sessions.

Upon completion the connection is established with the database and a few
global variables are added to the environment. These variables should not be
modified by the user!

\tabular{ll}{ EMR_GROOT \tab Root directory of global tracks\cr EMR_UROOT
\tab Root directory of user tracks\cr }
}
\seealso{
\code{\link{emr_db.reload}}, \code{\link{emr_track.import}},
\code{\link{emr_track.create}}, \code{\link{emr_track.rm}},
\code{\link{emr_track.ls}}, \code{\link{emr_vtrack.ls}},
\code{\link{emr_filter.ls}}
}
\keyword{~data}
\keyword{~database}
\keyword{~db}
